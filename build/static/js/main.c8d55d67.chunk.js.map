{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","IconButton","Input","placeholder","Message","user","timestamp","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","elementRef","useRef","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","current","scrollIntoView","ref","value","disabled","onChange","e","target","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","fontSize","uid","substring","signOut","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8d55d67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ChatHeader.css\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport { IconButton, Input } from \"@material-ui/core\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nfunction ChatHeader({ channelName }) {\n  return (\n    <div className=\"chatHeader\">\n      <div className=\"chatHeader__left\">\n        <h4>\n          <span className=\"chatHeader__hash\">#</span>\n          {channelName}\n        </h4>\n      </div>\n      <div className=\"chatHeader__right\">\n        <IconButton>\n          <NotificationsIcon />\n        </IconButton>\n        <IconButton>\n          <EditLocationRoundedIcon />\n        </IconButton>\n        <IconButton>\n          <PeopleIcon />\n        </IconButton>\n\n        <div className=\"chatHeader__search\">\n          <Input placeholder=\"search\" className=\"chatHeader__search\" />\n          <SearchIcon />\n        </div>\n\n        <IconButton>\n          <InboxIcon />\n        </IconButton>\n        <IconButton>\n          <HelpIcon />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatHeader;\n","import { Avatar } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Message.css\";\n\nfunction Message({ user, timestamp, message }) {\n  return (\n    <div className=\"message\">\n      <Avatar src={user.photo} />\n      <div className=\"message__info\">\n        <h5>\n          {user.displayName}\n          <span className=\"message__timestamp\">\n            {new Date(timestamp?.toDate()).toUTCString()}\n          </span>\n        </h5>\n        <h4>{message}</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const appSlice = createSlice({\n    name: \"app\",\n    initialState: {\n        channelId: null,\n        channelName: null,\n    },\n    reducers: {\n        setChannelInfo: (state, action) => {\n            state.channelId = action.payload.channelId;\n            state.channelName = action.payload.channelName;\n        },\n    },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = (state) => state.app.channelId;\nexport const selectChannelName = (state) => state.app.channelName;\n\nexport default appSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n//here is where user slice is created for readux is being implemented and we an access to this layer from everywhere.\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state, action) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyChIDxpv_UChgDP4o70nBoV0VaVB8engYE\",\n    authDomain: \"discord-bysavio.firebaseapp.com\",\n    databaseURL: \"https://discord-bysavio.firebaseio.com\",\n    projectId: \"discord-bysavio\",\n    storageBucket: \"discord-bysavio.appspot.com\",\n    messagingSenderId: \"90352009699\",\n    appId: \"1:90352009699:web:9a205b12a0f9687efb60d6\",\n    measurementId: \"G-MC0MK73PHZ\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport { auth, provider }\nexport default db","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Chat.css\";\nimport ChatHeader from \"./ChatHeader\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { Input } from \"@material-ui/core\";\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\nimport GifIcon from \"@material-ui/icons/Gif\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\nimport AlwaysScrollToBottom from \"./scrollToBottom\";\nimport Message from \"./Message\";\nimport { useSelector } from \"react-redux\";\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction Chat() {\n  const elementRef = useRef();\n  const channelId = useSelector(selectChannelId);\n  const user = useSelector(selectUser);\n  const channelName = useSelector(selectChannelName);\n\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (channelId) {\n      db.collection(\"channels\")\n        .doc(channelId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot(\n          (snapshot) => setMessages(snapshot.docs.map((doc) => doc.data())),\n          elementRef.current.scrollIntoView()\n        );\n    }\n  }, [channelId]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input,\n      user: user,\n    });\n\n    setInput(\"\");\n  };\n  return (\n    <div className=\"chat\">\n      <ChatHeader channelName={channelName} />\n      <div className=\"chat__messages\">\n        {messages.map((message) => (\n          <Message\n            key=\"key\"\n            timestamp={message.timestamp}\n            user={message.user}\n            message={message.message}\n          />\n        ))}\n        <div ref={elementRef} />\n      </div>\n      <div className=\"chat__input\">\n        <AddCircleIcon />\n        <form>\n          <Input\n            value={input}\n            disabled={!channelId}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder={`Message #${channelName}`}\n            className=\"chat__search\"\n          />\n          <button\n            type=\"submit\"\n            disabled={!channelId}\n            className=\"chat__inputButton\"\n            onClick={sendMessage}\n          >\n            Send Message\n          </button>\n        </form>\n        <div className=\"chat__inputIcons\">\n          <CardGiftcardIcon />\n          <GifIcon />\n          <EmojiEmotionsIcon />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setChannelInfo } from \"./features/appSlice\";\nimport \"./SidebarChannel.css\";\n\nfunction SidebarChannel({ id, channelName }) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"sidebarChannel\"\n            onClick={() =>\n                dispatch(\n                    setChannelInfo({\n                        channelId: id,\n                        channelName: channelName,\n                    })\n                )\n            }\n        >\n            <h5><span className=\"sidebarChannel__hash\">#</span>{channelName}</h5>\n        </div>\n    );\n}\n\nexport default SidebarChannel;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SidebarChannel from \"./SidebarChannel\";\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport CallIcon from \"@material-ui/icons/Call\";\nimport { Avatar } from \"@material-ui/core\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport db, { auth } from \"./firebase\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nfunction Sidebar() {\n  const user = useSelector(selectUser);\n  const [channels, setChannels] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"channels\").onSnapshot((snapshot) => {\n      setChannels(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          channel: doc.data(),\n        }))\n      );\n    });\n  }, []);\n\n  const handleAddChannel = () => {\n    const channelName = prompt(\"Enter a new channel name\");\n\n    if (channelName) {\n      db.collection(\"channels\").add({\n        channelName: channelName,\n      });\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__top\">\n        <h4>Super Savio</h4>\n        <ExpandMoreIcon />\n      </div>\n\n      <div className=\"sidebar__channels\">\n        <div className=\"sidebar__channelsHeader\">\n          <div className=\"siderbar__header\">\n            <IconButton className=\"iconBtn\">\n              <ExpandMoreIcon />\n            </IconButton>\n            <h4>Text Channels</h4>\n          </div>\n\n          <IconButton className=\"iconBtn\">\n            <AddIcon\n              onClick={handleAddChannel}\n              className=\"sidebar__addChannel\"\n            />\n          </IconButton>\n        </div>\n        <div className=\"sidebar__channelslist\">\n          {channels.map(({ id, channel }) => (\n            <SidebarChannel\n              key={id}\n              id={id}\n              channelName={channel.channelName}\n            />\n          ))}\n        </div>\n      </div>\n\n      <div className=\"sidebar__voice\">\n        <SignalCellularAltIcon\n          className=\"sidebar__voiceIcon\"\n          fontSize=\"large\"\n        />\n        <div className=\"sidebar__voiceInfo\">\n          <h5>Voice Connected</h5>\n          <h6>Stream</h6>\n        </div>\n        <div className=\"sidebar__voiceIcons\">\n          <IconButton className=\"iconBtn\">\n            <InfoOutlinedIcon />\n          </IconButton>\n          <IconButton className=\"iconBtn\">\n            <CallIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__profile\">\n        <Avatar src={user.photo} />\n        <div className=\"sidebar__profileInfo\">\n          <h5>{user.displayName}</h5>\n          <h6>{user.uid.substring(0, 6)}</h6>\n        </div>\n        <div className=\"sidebar__profileIcons\">\n          <IconButton className=\"iconBtn\">\n            <MicIcon />\n          </IconButton>\n          <IconButton className=\"iconBtn\">\n            <HeadsetIcon />\n          </IconButton>\n          <IconButton className=\"iconBtn\">\n            <ExitToAppIcon onClick={() => auth.signOut()} />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport { auth, provider } from './firebase'\nimport './Login.css'\n\nfunction Login() {\n    const signIn = () => {\n        // google login\n        auth.signInWithPopup(provider).catch((error) => alert(error.message))\n    }\n\n    return (\n        <div className='login'>\n            <div className=\"login__cont\">\n                <div className=\"login__logo\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/sco/thumb/9/98/Discord_logo.svg/800px-Discord_logo.svg.png\" alt=\"\" />\n                </div><br /><br />\n\n                <Button onClick={signIn}>Sign In With Google</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar'\r\nimport { selectUser } from './features/userSlice'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nimport { login, logout } from './features/userSlice'\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser)\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      // console.log('user is', authUser)\r\n      if (authUser) {\r\n        // log In\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }))\r\n      } else {\r\n        // log out\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n          <Login />\r\n        )}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}